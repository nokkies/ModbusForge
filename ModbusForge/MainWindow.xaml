<mah:MetroWindow x:Class="ModbusForge.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ModbusForge"
        xmlns:viewmodels="clr-namespace:ModbusForge.ViewModels"
        xmlns:views="clr-namespace:ModbusForge.Views"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="1073" Width="1556"
        Icon="pack://application:,,,/Resources/ModbusForge.ico"
        BorderThickness="1"
        Background="{StaticResource LightMetallicWhiteBrush}"
        GlowBrush="{StaticResource LightMetallicAccentBrush}"
        WindowTitleBrush="{StaticResource LightMetallicChromeBrush}"
        NonActiveWindowTitleBrush="{StaticResource LightMetallicSteelBrush}"
        TitleForeground="{StaticResource LightMetallicTextBrush}">

    <mah:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Converters.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- XAML option arrays to avoid designer dependency on code -->
            <x:Array x:Key="ModeOptionsAll" Type="{x:Type sys:String}">
                <sys:String>Client</sys:String>
                <sys:String>Server</sys:String>
            </x:Array>
            <x:Array x:Key="TypeOptionsAll" Type="{x:Type sys:String}">
                <sys:String>uint</sys:String>
                <sys:String>int</sys:String>
                <sys:String>real</sys:String>
                <sys:String>string</sys:String>
            </x:Array>
            <x:Array x:Key="WaveformOptionsAll" Type="{x:Type sys:String}">
                <sys:String>Ramp</sys:String>
                <sys:String>Sine</sys:String>
                <sys:String>Triangle</sys:String>
                <sys:String>Square</sys:String>
            </x:Array>
            <x:Array x:Key="AreaOptionsAll" Type="{x:Type sys:String}">
                <sys:String>HoldingRegister</sys:String>
                <sys:String>Coil</sys:String>
                <sys:String>InputRegister</sys:String>
                <sys:String>DiscreteInput</sys:String>
            </x:Array>

            <!-- Tabs that look like classic tabs -->
            <Style TargetType="TabItem" BasedOn="{x:Null}"/>

            <Style TargetType="TabControl" BasedOn="{x:Null}"/>

            <!-- DataGrid: show gridlines and alternating rows for clarity -->
            <Style TargetType="DataGrid">
                <Setter Property="GridLinesVisibility" Value="All"/>
                <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource GrayBrush6}"/>
                <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource GrayBrush6}"/>
                <Setter Property="AlternationCount" Value="2"/>
                <Setter Property="AlternatingRowBackground" Value="#0D000000"/>
                <Setter Property="RowBackground" Value="Transparent"/>
                <Setter Property="EnableRowVirtualization" Value="True"/>
                <Setter Property="EnableColumnVirtualization" Value="True"/>
            </Style>

            <!-- Modern Button Style -->
            <Style TargetType="Button" BasedOn="{StaticResource MahApps.Styles.Button}">
                <Setter Property="Padding" Value="12,6"/>
                <Setter Property="Margin" Value="4,2"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Style>

            <!-- GroupBox Style -->
            <Style TargetType="GroupBox" BasedOn="{StaticResource MahApps.Styles.GroupBox}">
                <Setter Property="Margin" Value="5"/>
                <Setter Property="Padding" Value="8"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <!-- StatusBar Style -->
            <Style TargetType="StatusBar">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent4}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FontWeight" Value="Medium"/>
            </Style>
        </ResourceDictionary>
    </mah:MetroWindow.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_Load All Configuration..." Command="{Binding LoadAllConfigCommand}"/>
                <MenuItem Header="_Save All Configuration..." Command="{Binding SaveAllConfigCommand}"/>
                <Separator/>
                <MenuItem Header="_Load Custom..." Command="{Binding LoadCustomCommand}"/>
                <MenuItem Header="_Save Custom..." Command="{Binding SaveCustomCommand}"/>
                <Separator/>
                <MenuItem Header="_Exit" Click="MenuItem_Exit_Click"/>
            </MenuItem>
            <MenuItem Header="_Trend">
                <MenuItem Header="Export _CSV..." Click="Trend_ExportCsv_Click"/>
                <MenuItem Header="Export _PNG..." Click="Trend_ExportPng_Click"/>
                <MenuItem Header="_Import CSV..." Click="Trend_ImportCsv_Click"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_Donate..." Click="MenuItem_Donate_Click"/>
                <MenuItem Header="_About" Click="MenuItem_About_Click"/>
            </MenuItem>
        </Menu>

        <GroupBox Header="{Binding ConnectionHeader}" Grid.Row="1" Margin="5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Server:" VerticalAlignment="Center" Margin="5,0" Visibility="{Binding ShowClientFields, Converter={StaticResource BoolToVis}}"/>
                <TextBox Grid.Column="1" Text="{Binding ServerAddress, UpdateSourceTrigger=PropertyChanged}" 
                         IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}" 
                         Margin="0,0,5,0" Visibility="{Binding ShowClientFields, Converter={StaticResource BoolToVis}}"/>

                <TextBlock Text="Port:" Grid.Column="2" VerticalAlignment="Center" Margin="5,0"/>
                <TextBox Grid.Column="3" Text="{Binding Port}" 
                         IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}" 
                         Margin="0,0,5,0"/>

                <TextBlock Text="Unit ID:" Grid.Column="4" VerticalAlignment="Center" Margin="5,0" Visibility="{Binding ShowClientFields, Converter={StaticResource BoolToVis}}"/>
                <TextBox Grid.Column="5" Text="{Binding UnitId}" 
                         IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}" 
                         Margin="0,0,5,0" Visibility="{Binding ShowClientFields, Converter={StaticResource BoolToVis}}"/>

                <TextBlock Text="Mode:" Grid.Column="6" VerticalAlignment="Center" Margin="5,0"/>
                <ComboBox Grid.Column="7" SelectedItem="{Binding Mode}" ItemsSource="{StaticResource ModeOptionsAll}"
                          IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}"
                          Width="80" Margin="0,0,5,0"/>

                <Button Grid.Column="8" Content="{Binding ConnectButtonText}" Command="{Binding ConnectCommand}" 
                        IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}" 
                        Width="80" Margin="0,0,5,0"/>

                <StackPanel Grid.Column="9" Orientation="Horizontal">
                    <Button Content="Disconnect" Command="{Binding DisconnectCommand}" 
                            IsEnabled="{Binding IsConnected}"
                            Width="80"/>
                </StackPanel>
            </Grid>
        </GroupBox>

        <TabControl Grid.Row="2" Margin="5">
            <TabItem Header="Registers">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBlock Text="Start:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding RegisterStart}" Margin="0,0,10,0"/>
                        <TextBlock Text="Count:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding RegisterCount}" Margin="0,0,10,0"/>
                        <Button Content="Read" Command="{Binding ReadRegistersCommand}" Width="80" Margin="0,0,10,0"/>
                        <TextBlock Text="Global Type:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <ComboBox Width="120" SelectedItem="{Binding RegistersGlobalType}" ItemsSource="{StaticResource TypeOptionsAll}"/>
                        <Separator Width="10" Opacity="0"/>
                        <CheckBox Content="Continuous Read" IsChecked="{Binding HoldingMonitorEnabled}" VerticalAlignment="Center"/>
                        <TextBlock Text=" Period (ms):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <TextBox Width="80" Text="{Binding HoldingMonitorPeriodMs}"/>
                    </StackPanel>

                    <DataGrid x:Name="HoldingRegistersGrid" Grid.Row="1" ItemsSource="{Binding HoldingRegisters}" AutoGenerateColumns="False" IsReadOnly="False" CellEditEnding="HoldingRegistersGrid_CellEditEnding">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="*" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Value" Binding="{Binding ValueText}" Width="*"/>
                            <DataGridComboBoxColumn Header="Type" SelectedItemBinding="{Binding Type}" ItemsSource="{StaticResource TypeOptionsAll}" Width="*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="Input Registers">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBlock Text="Start:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding InputRegisterStart}" Margin="0,0,10,0"/>
                        <TextBlock Text="Count:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding InputRegisterCount}" Margin="0,0,10,0"/>
                        <Button Content="Read" Command="{Binding ReadInputRegistersCommand}" Width="80" Margin="0,0,10,0"/>
                        <TextBlock Text="Global Type:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <ComboBox Width="120" SelectedItem="{Binding InputRegistersGlobalType}" ItemsSource="{StaticResource TypeOptionsAll}"/>
                        <Separator Width="10" Opacity="0"/>
                        <CheckBox Content="Continuous Read" IsChecked="{Binding InputRegistersMonitorEnabled}" VerticalAlignment="Center"/>
                        <TextBlock Text=" Period (ms):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <TextBox Width="80" Text="{Binding InputRegistersMonitorPeriodMs}"/>
                    </StackPanel>

                    <DataGrid Grid.Row="1" ItemsSource="{Binding InputRegisters}" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="*"/>
                            <DataGridTextColumn Header="Value" Binding="{Binding Value}" Width="*"/>
                            <DataGridTextColumn Header="Type" Binding="{Binding Type}" Width="*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="Coils">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBlock Text="Start:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding CoilStart}" Margin="0,0,10,0"/>
                        <TextBlock Text="Count:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding CoilCount}" Margin="0,0,10,0"/>
                        <Button Content="Read" Command="{Binding ReadCoilsCommand}" Width="80"/>
                        <Separator Width="10" Opacity="0"/>
                        <CheckBox Content="Continuous Read" IsChecked="{Binding CoilsMonitorEnabled}" VerticalAlignment="Center"/>
                        <TextBlock Text=" Period (ms):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <TextBox Width="80" Text="{Binding CoilsMonitorPeriodMs}"/>
                    </StackPanel>

                    <DataGrid x:Name="CoilsGrid" Grid.Row="1" ItemsSource="{Binding Coils}" AutoGenerateColumns="False" IsReadOnly="False" CellEditEnding="CoilsGrid_CellEditEnding" CurrentCellChanged="CoilsGrid_CurrentCellChanged">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="*"/>
                            <DataGridCheckBoxColumn Header="State" Binding="{Binding State}" Width="*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="Discrete Inputs">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBlock Text="Start:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding DiscreteInputStart}" Margin="0,0,10,0"/>
                        <TextBlock Text="Count:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <TextBox Width="80" Text="{Binding DiscreteInputCount}" Margin="0,0,10,0"/>
                        <Button Content="Read" Command="{Binding ReadDiscreteInputsCommand}" Width="80"/>
                        <Separator Width="10" Opacity="0"/>
                        <CheckBox Content="Continuous Read" IsChecked="{Binding DiscreteInputsMonitorEnabled}" VerticalAlignment="Center"/>
                        <TextBlock Text=" Period (ms):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <TextBox Width="80" Text="{Binding DiscreteInputsMonitorPeriodMs}"/>
                    </StackPanel>

                    <DataGrid Grid.Row="1" ItemsSource="{Binding DiscreteInputs}" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="*"/>
                            <DataGridCheckBoxColumn Header="State" Binding="{Binding State}" Width="*"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="Custom">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Toolbar -->
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <Button Content="Add" Command="{Binding AddCustomEntryCommand}" Width="80"/>
                        <Separator Width="10" Opacity="0"/>
                        <Button Content="Read All" Command="{Binding ReadAllCustomNowCommand}" Width="80"/>
                        <Separator Width="10" Opacity="0"/>
                        <Button Content="Save" Command="{Binding SaveCustomCommand}" Width="80"/>
                        <Button Content="Load" Command="{Binding LoadCustomCommand}" Width="80" Margin="5,0,0,0"/>
                        <Separator Width="20" Opacity="0"/>
                        <CheckBox Content="Continuous Read" IsChecked="{Binding GlobalMonitorEnabled}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                        <TextBlock VerticalAlignment="Center" Foreground="Gray">
                            <Run Text="Note:" FontWeight="SemiBold"/>
                            <Run Text=" Reads Trend-enabled rows."/>
                        </TextBlock>
                    </StackPanel>

                    <!-- Custom entries grid -->
                    <DataGrid Grid.Row="1" ItemsSource="{Binding CustomEntries}" AutoGenerateColumns="False" IsReadOnly="False">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                            <DataGridComboBoxColumn Header="Area" SelectedItemBinding="{Binding Area}" ItemsSource="{StaticResource AreaOptionsAll}" Width="*"/>
                            <DataGridTextColumn Header="Address" Binding="{Binding Address}" Width="*"/>
                            <DataGridComboBoxColumn Header="Type" SelectedItemBinding="{Binding Type}" ItemsSource="{StaticResource TypeOptionsAll}" Width="*"/>
                            <DataGridTextColumn Header="Value" Binding="{Binding Value}" Width="2*"/>
                            <DataGridCheckBoxColumn Header="Cont. Write" Binding="{Binding Continuous}" Width="Auto"/>
                            <DataGridTextColumn Header="Write Period (ms)" Binding="{Binding PeriodMs}" Width="*"/>
                            <DataGridCheckBoxColumn Header="Trend" Binding="{Binding Trend}" Width="Auto"/>
                            <DataGridTemplateColumn Header="Actions" Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Content="Write" Padding="8,2" Margin="0,0,5,0"
                                                    Command="{Binding DataContext.WriteCustomNowCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                                    CommandParameter="{Binding ., FallbackValue={x:Null}, TargetNullValue={x:Null}}"/>
                                            <Button Content="Read" Padding="8,2"
                                                    Command="{Binding DataContext.ReadCustomNowCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                                    CommandParameter="{Binding ., FallbackValue={x:Null}, TargetNullValue={x:Null}}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="Simulation">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Toolbar -->
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <CheckBox Content="Enable Simulation" IsChecked="{Binding SimulationEnabled}" VerticalAlignment="Center"/>
                        <TextBlock Text=" Period (ms):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                        <TextBox Width="80" Text="{Binding SimulationPeriodMs}"/>
                        <TextBlock VerticalAlignment="Center" Foreground="Gray" Margin="10,0,0,0">
                            <Run Text="Note:" FontWeight="SemiBold"/>
                            <Run Text=" Server mode only."/>
                        </TextBlock>
                    </StackPanel>

                    <!-- Content -->
                    <StackPanel Grid.Row="1" Orientation="Vertical" >
                        <GroupBox Header="Holding Registers (Waveform)">
                            <StackPanel Orientation="Vertical" Margin="5">
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox Content="Enable" IsChecked="{Binding SimHoldingsEnabled}" VerticalAlignment="Center"/>
                                    <TextBlock Text=" Start:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingStart}"/>
                                    <TextBlock Text=" Count:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingCount}"/>
                                    <TextBlock Text=" Min:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingMin}"/>
                                    <TextBlock Text=" Max:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingMax}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Margin="0,6,0,0">
                                    <TextBlock Text=" Waveform:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                    <ComboBox Width="100" SelectedItem="{Binding SimHoldingWaveformType}" ItemsSource="{StaticResource WaveformOptionsAll}"/>
                                    <TextBlock Text=" Amp:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingAmplitude}"/>
                                    <TextBlock Text=" Freq (Hz):" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingFrequencyHz}"/>
                                    <TextBlock Text=" Offset:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                    <TextBox Width="80" Text="{Binding SimHoldingOffset}"/>
                                </StackPanel>
                                <TextBlock Foreground="Gray" Margin="0,4,0,0">
                                    <Run Text="Note:" FontWeight="SemiBold"/>
                                    <Run Text=" Ramp uses Min/Max. Sine/Triangle/Square use Amplitude/Offset (clipped to 0..65535)."/>
                                </TextBlock>
                            </StackPanel>
                        </GroupBox>

                        <GroupBox Header="Coils (Toggle)">
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <CheckBox Content="Enable" IsChecked="{Binding SimCoilsEnabled}" VerticalAlignment="Center"/>
                                <TextBlock Text=" Start:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimCoilStart}"/>
                                <TextBlock Text=" Count:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimCoilCount}"/>
                            </StackPanel>
                        </GroupBox>

                        <GroupBox Header="Input Registers (Ramp)">
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <CheckBox Content="Enable" IsChecked="{Binding SimInputsEnabled}" VerticalAlignment="Center"/>
                                <TextBlock Text=" Start:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimInputStart}"/>
                                <TextBlock Text=" Count:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimInputCount}"/>
                                <TextBlock Text=" Min:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimInputMin}"/>
                                <TextBlock Text=" Max:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimInputMax}"/>
                            </StackPanel>
                        </GroupBox>

                        <GroupBox Header="Discrete Inputs (Toggle)">
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <CheckBox Content="Enable" IsChecked="{Binding SimDiscreteEnabled}" VerticalAlignment="Center"/>
                                <TextBlock Text=" Start:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimDiscreteStart}"/>
                                <TextBlock Text=" Count:" VerticalAlignment="Center" Margin="10,0,5,0"/>
                                <TextBox Width="80" Text="{Binding SimDiscreteCount}"/>
                            </StackPanel>
                        </GroupBox>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Decode">
                <Grid Margin="5">
                    <views:DecodeView />
                </Grid>
            </TabItem>
            <TabItem Header="Trend">
                <Grid Margin="5">
                    <views:TrendView x:Name="TrendViewControl" />
                </Grid>
            </TabItem>
        </TabControl>

        <StatusBar Grid.Row="3">
            <StatusBarItem>
                <TextBlock Text="{Binding StatusMessage}" FontWeight="SemiBold"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="0,0,20,0">
                        <Run Text="Version:" FontWeight="SemiBold"/>
                        <Run Text="{Binding Version}"/>
                    </TextBlock>
                    <TextBlock>
                        <Run Text="Status:" FontWeight="SemiBold"/>
                        <Run Text="{Binding IsConnected, Converter={StaticResource BooleanToConnectedConverter}}"/>
                    </TextBlock>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</mah:MetroWindow>
